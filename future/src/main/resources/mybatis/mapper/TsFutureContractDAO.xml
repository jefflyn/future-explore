<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guru.future.mapper.TsFutureContractDAO">
    <resultMap id="BaseResultMap" type="com.guru.future.domain.TsFutureContractDO">
        <id column="ts_code" jdbcType="VARCHAR" property="tsCode"/>
        <result column="symbol" jdbcType="VARCHAR" property="symbol"/>
        <result column="exchange" jdbcType="VARCHAR" property="exchange"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="fut_code" jdbcType="VARCHAR" property="futCode"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
    </resultMap>

    <sql id="Base_Column_List">
        ts_code, symbol, exchange, `name`, fut_code, type
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from ts_contract
        where ts_code = #{tsCode,jdbcType=VARCHAR}
    </select>

    <insert id="insert" parameterType="com.guru.future.domain.TsFutureContractDO">
        insert into ts_contract (ts_code, symbol, exchange, `name`, fut_code, type)
        values (#{tsCode,jdbcType=VARCHAR}, #{symbol,jdbcType=VARCHAR}, #{exchange,jdbcType=VARCHAR},
                #{name,jdbcType=VARCHAR}, #{futCode,jdbcType=VARCHAR}, #{type, jdbcType=INTEGER})
    </insert>

    <select id="selectByQuery" resultType="com.guru.future.domain.TsFutureContractDO">
        select
        <include refid="Base_Column_List"/>
        from ts_contract
        <where>
            <if test="symbol != null">
                and symbol = #{symbol}
            </if>
            <if test="name != null">
                and name = LIKE concat('%',#{name},'%')
            </if>
            <if test="type != null">
                and type = #{type}
            </if>
            <if test="codes != null and codes.size() > 0">
                and ts_code in
                <foreach collection="codes" open="(" close=")" separator="," item="item">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>
</mapper>